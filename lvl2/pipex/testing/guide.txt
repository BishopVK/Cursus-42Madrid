# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    guide.txt                                          :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: danjimen <danjimen@student.42madrid.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/04/12 08:45:07 by danjimen          #+#    #+#              #
#    Updated: 2024/04/17 08:00:07 by danjimen         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

---GUÍA 1---

1. Analizar los argumentos de la línea de comandos:
	- Usa argc y argv para obtener los argumentos proporcionados por el usuario.
	- Verifica que se proporcionen los cuatro argumentos requeridos y guárdalos en variables para su posterior uso.

2. Crear un proceso hijo:
	- Usa fork() para crear un nuevo proceso hijo.
	- Verifica si el fork fue exitoso para distinguir entre el proceso padre y el hijo.

3. Redirigir la entrada y salida estándar:
	- En el proceso hijo, redirige la entrada estándar desde archivo1 utilizando dup2() y open().
	- En el proceso hijo, redirige la salida estándar hacia archivo2 utilizando dup2() y open().

4. Ejecutar comando1 y comando2:
		- En el proceso hijo, usa execvp() para ejecutar comando1 y comando2 con sus respectivos parámetros.

5. Establecer la tubería (pipe):
	- En el proceso padre, crea una tubería utilizando pipe() para conectar la salida de comando1 con la entrada de comando2.

6. Ejecutar comando1 y comando2 en el contexto de la tubería:
	- En el proceso padre, utiliza fork() nuevamente para crear dos nuevos procesos hijos.
	- En uno de los procesos hijos, redirige la salida estándar hacia la extremidad de escritura de la tubería.
	- En el otro proceso hijo, redirige la entrada estándar desde la extremidad de lectura de la tubería.
	- Luego, en ambos procesos hijos, utiliza execvp() para ejecutar comando1 y comando2 con sus respectivos parámetros.

7. Esperar a que los procesos hijos terminen:
	- En el proceso padre, utiliza wait() o waitpid() para esperar a que los procesos hijos terminen.

8. Liberar recursos:
	- Cierra los descriptores de archivo y libera cualquier memoria asignada.

9. Manejo de errores:
	- Implementa un manejo de errores adecuado para verificar el éxito de cada llamada al sistema y manejar los casos en los que algo salga mal.


---GUÍA 2---

1. Abrir el archivo de entrada (archivo1):
	- Usa la función open con O_RDONLY para abrir el archivo.

2. Crear un pipe:
	- Usa la función pipe para crear un pipe. Esto te dará dos descriptores de archivo,
	  uno para leer desde el pipe (pipe_fd[0]) y otro para escribir en él (pipe_fd[1]).

3. Crear el primer proceso hijo:
	- Usa fork para crear un nuevo proceso.
	- En el proceso hijo, cierra el extremo de lectura del pipe (pipe_fd[0]) y redirige la
	  salida estándar (STDOUT_FILENO) al extremo de escritura del pipe (pipe_fd[1]).
	- Ejecuta el primer comando usando execve. Asegúrate de pasar los argumentos adecuados.

4. Crear el segundo proceso hijo:
	- En el proceso padre, después de haber creado el primer hijo, crea otro hijo.
	- En este nuevo proceso hijo, cierra el extremo de escritura del pipe (pipe_fd[1]) y
	  redirige la entrada estándar (STDIN_FILENO) al extremo de lectura del pipe (pipe_fd[0]).
	- Ejecuta el segundo comando usando execve. Asegúrate de pasar los argumentos adecuados.

5. Esperar a que ambos procesos hijos terminen:
	- En el proceso padre, usa wait o waitpid para esperar a que ambos procesos hijos terminen.

6. Cerrar los descriptores de archivo y archivos:
	- En el proceso padre, cierra los descriptores de archivo y archivos abiertos.

-----------------------------------------------------

# ./pipex infile cmd1 cmd2 outfile
pipe()
 |
 |-- fork()
      |
      |-- child // cmd1
      :     |--dup2()
      :     |--close end[0]
      :     |--execve(cmd1)
      :
      |-- parent // cmd2
            |--dup2()
            |--close end[1]
            |--execve(cmd2)
 
# pipe() sends the output of the first execve() as input to the second execve()
# fork() runs two processes (i.e. two commands) in one single program
# dup2() swaps our files with stdin and stdout

-------------------------Setting the pipe----------------------------

void    pipex(int f1, int f2)
{
    int end[2];    pipe(end);
}

# pipe() takes an array of two int, and links them together
# what is done in end[0] is visible to end[1], and vice versa
# pipe() assigns an fd to each end
# Fds are file descriptors
# since files can be read and written to, by getting an fd each, the two ends can communicate
# end[1] will write to the its own fd, and end[0] will read end[1]’s fd and write to its own

-------------------------Forking the processes----------------------------

void    pipex(int f1, int f2)
{
    int   end[2];
    pid_t parent;    pipe(end);
    parent = fork();
    if (parent < 0)
         return (perror("Fork: "));
    if (!parent) // if fork() returns 0, we are in the child process
        child_process(f1, cmd1);
    else
        parent_process(f2, cmd2);
}

# fork() splits the process in two sub-processes -> parallel, simultaneous, happen at the same time
# it returns 0 for the child process, a non-zero for the parent process, -1 in case of error

--------------------------FDs---------------------------

                           -----------------    
                 0         |     stdin     |  
                           -----------------    
                 1         |     stdout    |    
                           -----------------    
                 2         |     stderr    |  
                           -----------------
                 3         |     infile    |  // open()
                           -----------------
                 4         |     outfile   |  // open()
                           -----------------
                 5         |     end[0]    | 
                           -----------------
                 6         |     end[1]    |  
                           -----------------

--------------------------Swapping fds with dup2()---------------------------

// each cmd needs a stdin (input) and returns an output (to stdout)
   
    infile                                             outfile
as stdin for cmd1                                 as stdout for cmd2            
       |                        PIPE                        ↑
       |           |---------------------------|            |
       ↓             |                       |              |
      cmd1   -->    end[1]       ↔       end[0]   -->     cmd2           
                     |                       |
            cmd1   |---------------------------|  end[0]
           output                             reads end[1]
         is written                          and sends cmd1
          to end[1]                          output to cmd2
       (end[1] becomes                      (end[0] becomes 
        cmd1 stdout)                           cmd2 stdin)

>> pseudo code:
# child_process(f1, cmd1); // add protection if dup2() < 0
// dup2 close stdin, f1 becomes the new stdin
dup2(f1, STDIN_FILENO); // we want f1 to be execve() input
dup2(end[1], STDOUT_FILENO); // we want end[1] to be execve() stdout
close(end[0]) # --> always close the end of the pipe you don't use,
                    as long as the pipe is open, the other end will 
                    be waiting for some kind of input and will not
                    be able to finish its process
close(f1)
// execve function for each possible path (see below)
exit(EXIT_FAILURE);

>> pseudo code:
# parent_process(f2, cmd2);
int status;
waitpid(-1, &status, 0);
dup2(f2, ...); // f2 is the stdout
dup2(end[0], ...); // end[0] is the stdin
close(end[1])
close(f2);
// execve function for each possible path (see below)
exit(EXIT_FAILURE);

--------------------------Executing with execve()---------------------------

int execve(const char *path, char *const argv[], char *envp[]);

# path: the path to our command
# type `which ls` and `which wc` in your terminal
# you'll see the exact path to the commands' binaries

# argv[]: the args the command needs, for ex. `ls -la`
# you can use your ft_split to obtain a char **
# like this { "ls", "-la", NULL }
# it must be null terminated

# envp: environmental variable -> retrieved from main (see below)
# in envp the line PATH contains all possible paths to the commands' binaries
# type env in the terminal to have a look
# split on : to retrieve all possible PATHs 

int main(int ac, char **ag, char **envp)
{
     int f1;
     int f2;
     f1 = open(ag[1], O_RDONLY);
     f2 = open(ag[4], O_CREAT | O_RDWR | O_TRUNC, 0644);
     if (f1 < 0 || f2 < 0)
          return (-1);
     pipex(f1, f2, ag, envp);
     return (0);
}

>> pseudo code:
// parsing (somewhere in your code) char *PATH_from_envp;
char **mypaths;
char **mycmdargs; // retrieve the line PATH from envp

PATH_from_envp = ft_substr(envp ....);
mypaths = ft_split(PATH_from_envp, ":");
mycmdargs = ft_split(ag[2], " ");// in your child or parent process
int  i;
char *cmd;

i = -1;
while (mypaths[++i])
{
    cmd = ft_join(mypaths[i], ag[2]); // protect your ft_join
    execve(cmd, mycmdargs, envp); // if execve succeeds, it exits
    // perror("Error"); <- add perror to debug
    free(cmd) // if execve fails, we free and we try a new path
}
return (EXIT_FAILURE);

--------------------------Creating a pipe with two child processes---------------------------

void    pipex(int f1, int f2, char *cmd1, char *cmd 2)
{
    int   end[2];
    int   status;
    pid_t child1;
    pid_t child2;    pipe(end);
    child1 = fork();
    if (child1 < 0)
         return (perror("Fork: "));
    if (child1 == 0)
        child_one(f1, cmd1);
    child2 = fork();
    if (child2 < 0)
         return (perror("Fork: "));
    if (child2 == 0)
        child_two(f2, cmd2);
    close(end[0]);         // this is the parent
    close(end[1]);         // doing nothing
    waitpid(child1, &status, 0);  // supervising the children
    waitpid(child2, &status, 0);  // while they finish their tasks
}
