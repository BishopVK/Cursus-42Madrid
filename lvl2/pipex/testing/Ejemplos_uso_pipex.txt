./pipex infile "ls -l" "wc -l" outfile
deberá hacer lo mismo que “<infile ls -l | wc -l >outfile”

./pipex infile "grep a1" "wc -w" outfile
deberá hacer lo mismo que “<infile grep a1 | wc -w >outfile”

1. Contar el número de líneas que contienen la palabra "error" en un archivo:
./pipex infile "grep error" "wc -l" outfile
Esto sería equivalente a <infile grep error | wc -l >outfile.

2. Filtrar las líneas que contienen la palabra "success" y contar cuántas palabras tiene cada una:
./pipex infile "grep success" "wc -w" outfile
Esto sería equivalente a <infile grep success | wc -w >outfile.

3. Mostrar los procesos en ejecución que contienen la palabra "bash" y contar cuántos hay:
./pipex infile "ps aux" "grep bash" "wc -l" outfile
Esto sería equivalente a <infile ps aux | grep bash | wc -l >outfile.

4. Ordenar alfabéticamente las líneas de un archivo y contar cuántas son:
./pipex infile "sort" "wc -l" outfile
Esto sería equivalente a <infile sort | wc -l >outfile.

5. Contar cuántas veces aparece una palabra específica en un archivo de texto:
./pipex infile "grep palabra" "wc -l" outfile
Esto sería equivalente a <infile grep palabra | wc -l >outfile.


--AWK--

6. Sumar los valores de la segunda columna del fichero Libro1.csv (separados por ;)
./pipex testing/txt.txt "grep 4" "awk -F ';' '{suma += \$2} END {print suma}' testing/Libro1.csv" salida.txt
Esto sería equivalente a <infile grep "4" | awk -F',' '{suma += $2} END {print suma}' archivo.csv >salida.txt

7. Imprimir la primera columna de un documento csv
./pipex testing/txt.txt "grep 4" "awk -F ';' '{print \$1}' testing/Libro1.csv" salida.txt
Esto sería equivalente a <infile grep "4" | awk -F ';' '{print $1}' testing/Libro1.csv >salida.txt

8. Suma la primera columna separadas por tabulación del archivo impreso por cat: testing/txt.txt
./pipex testing/txt.txt "cat" "awk -F '\t' '{suma += \$1} END {print suma}'" salida.txt
Esto sería equivalente a <infile cat | awk -F '\t' '{suma += $1} END {print suma}'

9. Imprimir las líneas que tengan un número mayor que 10 y mostrar solo la segunda columna
./pipex testing/txt.txt "cat" "awk '\$1 > 10 {print \$2}'" salida.txt
Esto sería equivalente a <testing/txt.txt cat | awk '$1 > 10 {print $2}' >salida.txt


---PRUEBAS ENVIRONMENT---

SYSTEM:
	<testing/txt.txt grep "4" | ls >/dev/stdout
	Devuelve un ls

	<testing/txt.txt grep "4" | /home/bishopvk/cursus/lvl2/pipex/ls >/dev/stdout
	Devuelve mi programa ls

	<testing/txt.txt grep "4" | /home/bishopvk/cursus/lvl2/pipex/dani >/dev/stdout
	Devuelve error

		>>QUITAMOS LAS VARIABLES DE ENTORNO
		# Guarda el valor actual de la variable de entorno que deseas deshabilitar
		OLDPATH="$PATH"

		# Desactiva temporalmente la variable de entorno
		unset PATH

		# Restaura el valor original de la variable de entorno después de las pruebas
		export PATH="$OLDPATH"

	<testing/txt.txt grep "4" | ls >/dev/stdout
	Devuelve mi programa ls

	<testing/txt.txt grep "4" | /home/bishopvk/cursus/lvl2/pipex/ls >/dev/stdout
	Devuelve mi programa ls

	<testing/txt.txt grep "4" | /home/bishopvk/cursus/lvl2/pipex/dani >/dev/stdout
	Devuelve error

PIPEX:
	./pipex testing/txt.txt "grep 4" ls /dev/stdout
	Devuelve un ls

	./pipex testing/txt.txt "grep 4" "/home/bishopvk/cursus/lvl2/pipex/ls" /dev/stdout
	Devuelve mi programa ls

	./pipex testing/txt.txt "grep 4" "/home/bishopvk/cursus/lvl2/pipex/dani" /dev/stdout
	Devuelve error

		>>QUITAMOS LAS VARIABLES DE ENTORNO

	env -i ./pipex testing/txt.txt "grep 4" ls /dev/stdout
	Devuelve mi programa ls

	env -i ./pipex testing/txt.txt "grep 4" "/home/bishopvk/cursus/lvl2/pipex/ls" /dev/stdout
	Devuelve mi programa ls

	env -i ./pipex testing/txt.txt "grep 4" "/home/bishopvk/cursus/lvl2/pipex/dani" /dev/stdout
	No devuelve nada


----RETURN----

- ERROR EN EL INFILE:
<infile.ttxxtt grep "a" | wc -w >salida.txt
./pipex testing/test.ttxxtt "grep a" "wc -w" salida.txt
echo $? --> 0

- ERROR EN EL PRIMER COMANDO:
<testing/test.txt greppp "a" | wc -w >salida.txt
./pipex testing/test.txt "greppp a" "wc -w" salida.txt
echo $? --> 0

- ERROR EN EL SEGUNDO COMANDO:
<testing/test.txt grep "a" | wccc -w >salida.txt
./pipex testing/test.txt "grep a" "wccc -w" salida.txt
echo $? --> 127

- ERROR EN EL OUTFILE:
<testing/test.txt grep "a" | wc -w >/no_exist/salida.txt
./pipex testing/test.txt "grep a" "wc -w" /no_exist/salida.txt
echo $? --> 1
