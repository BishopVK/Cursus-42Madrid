游댳 Inclusi칩n
#include <list>


游댳 Tipos principales
std::list<T>             // Lista de elementos de tipo T
std::list<T>::iterator   // Iterador que permite recorrer la lista
std::list<T>::const_iterator // Iterador constante


游댳 Constructores
std::list<int> l1;                  // Lista vac칤a
std::list<int> l2(5);              // Lista con 5 elementos default (0 para int)
std::list<int> l3(5, 10);          // Lista con 5 elementos valiendo 10
std::list<int> l4(l3);             // Copia de l3


游댳 Iteradores
begin()        // Iterador al primer elemento
end()          // Iterador al "pasado del 칰ltimo"

rbegin()       // Iterador inverso al 칰ltimo elemento
rend()         // Iterador inverso al "antes del primero"


游댳 Capacidad
empty()        // true si est치 vac칤a
size()         // n칰mero de elementos
max_size()     // tama침o m치ximo te칩rico (depende del sistema)


游댳 Acceso a elementos
front()        // referencia al primer elemento
back()         // referencia al 칰ltimo elemento


游댳 Modificadores
push_front(x)      // inserta x al principio
pop_front()        // elimina el primer elemento

push_back(x)       // inserta x al final
pop_back()         // elimina el 칰ltimo elemento

insert(pos, x)     // inserta x antes de 'pos' (iterator)
erase(pos)         // elimina el elemento en 'pos'
erase(pos1, pos2)  // elimina el rango [pos1, pos2)

clear()            // elimina todos los elementos


游댳 Operaciones espec칤ficas de listas
assign(count, value)             // asigna 'count' veces 'value'
assign(first, last)              // asigna desde un rango de iteradores

splice(pos, other_list)         // mueve todos los elementos de otra lista a pos
splice(pos, other_list, it)     // mueve solo el elemento 'it'
splice(pos, other_list, first, last) // mueve rango [first, last)

remove(value)                   // elimina todos los elementos con ese valor
remove_if(pred)                 // elimina si cumple con el predicado

unique()                        // elimina elementos duplicados consecutivos
unique(pred)                    // usando predicado personalizado

merge(other_list)               // mezcla dos listas ordenadas
merge(other_list, comp)         // con comparador personalizado

sort()                          // ordena usando operator<
sort(comp)                      // usando comparador personalizado

reverse()                       // invierte el orden


游늷 Notas importantes
> No hay acceso aleatorio (operator[] no est치 definido).
> Las operaciones como splice, remove, merge, sort, etc., son muy eficientes porque solo reordenan punteros, sin copiar o mover elementos.
> Requiere C++98 o superior, pero no todas las implementaciones de predicados o funciones lambda (como remove_if) son muy c칩modas en C++98 porque a칰n no existen lambdas (eso aparece en C++11).